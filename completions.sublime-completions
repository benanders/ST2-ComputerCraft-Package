{
    "scope": "source.computercraft",

    "completions": [
    // Keywords
        { "trigger": "break", "contents": "break" },
        { "trigger": "do", "contents": "do" },
        { "trigger": "else", "contents": "else" },
        { "trigger": "for", "contents": "for" },
        { "trigger": "if", "contents": "if" },
        { "trigger": "elseif", "contents": "elseif" },
        { "trigger": "return", "contents": "return" },
        { "trigger": "then", "contents": "then" },
        { "trigger": "repeat", "contents": "repeat" },
        { "trigger": "while", "contents": "while" },
        { "trigger": "until", "contents": "until" },
        { "trigger": "end", "contents": "end" },
        { "trigger": "function", "contents": "function" },
        { "trigger": "local", "contents": "local" },
        { "trigger": "false", "contents": "false" },
        { "trigger": "true", "contents": "true" },
        { "trigger": "nil", "contents": "nil" },


    // The Bit API is for manipulating numbers using bitwise binary operations
        { "trigger": "bit.tobits", "contents": "bit.tobits(${0:int n})" },
        { "trigger": "bit.blshift", "contents": "bit.blshift(${1:int n}, ${0:bits bits})" },
        { "trigger": "bit.brshift", "contents": "bit.brshift(${1:int n}, ${0:bits bits})" },
        { "trigger": "bit.bxor", "contents": "bit.bxor(${1:int m}, ${0:int n})" },
        { "trigger": "bit.bor", "contents": "bit.bor(${1:int m}, ${0:int n})" },
        { "trigger": "bit.band", "contents": "bit.band(${1:int m}, ${0:int n})" },
        { "trigger": "bit.bnot", "contents": "bit.bnot(${0:int n})" },
        { "trigger": "bot.tonumb", "contents": "bot.tonumb(${0:table bit_tbl})" },

    // Colors
        { "trigger": "colors.combine", "contents": "colors.combine(${1:color1}, ${2:color2}, ${3:...})" },
        { "trigger": "colors.subtract", "contents": "colors.subtract(${1:colors}, ${2:color1}, ${3:color2}, ${4:...})" },
        { "trigger": "colors.test", "contents": "colors.test(${1:colors}, ${2:color})" },

        "colors.white",
        "colors.orange",
        "colors.magenta",
        "colors.lightBlue",
        "colors.yellow",
        "colors.lime",
        "colors.pink",
        "colors.gray",
        "colors.lightGray",
        "colors.cyan",
        "colors.purple",
        "colors.blue",
        "colors.brown",
        "colors.green",
        "colors.red",
        "colors.black",

    // Colours
        { "trigger": "colours.combine", "contents": "colours.combine(${1:colour1}, ${2:colour2}, ${3:...})" },
        { "trigger": "colours.subtract", "contents": "colours.subtract(${1:colours}, ${2:colour1}, ${3:colour2}, ${4:...})" },
        { "trigger": "colours.test", "contents": "colours.test(${1:colours}, ${2:colour})" },

        "colours.white",
        "colours.orange",
        "colours.magenta",
        "colours.lightBlue",
        "colours.yellow",
        "colours.lime",
        "colours.pink",
        "colours.gray",
        "colours.lightGray",
        "colours.cyan",
        "colours.purple",
        "colours.blue",
        "colours.brown",
        "colours.green",
        "colours.red",
        "colours.black",

    // Coroutine
        { "trigger": "coroutine.create", "contents": "coroutine.create(${1:function})" },
        { "trigger": "coroutine.resume", "contents": "coroutine.resume(${1:coroutine}, ${2:func1}, ${3:func2}, ${4:...})" },
        { "trigger": "coroutine.running", "contents": "coroutine.running()" },
        { "trigger": "coroutine.status", "contents": "coroutine.status(${1:coroutine})" },
        { "trigger": "coroutine.wrap", "contents": "coroutine.wrap(${1:function})" },
        { "trigger": "coroutine.yield", "contents": "coroutine.yield(${1:[var1]}, ${2:[var2]}, ${3:...})" },

    // Disk
        { "trigger": "disk.isPresent", "contents": "disk.isPresent(${1:side})" },
        { "trigger": "disk.hasData", "contents": "disk.hasData(${1:side})" },
        { "trigger": "disk.getMountPath", "contents": "disk.getMountPath(${1:side})" },
        { "trigger": "disk.setLabel", "contents": "disk.setLabel(${1:side}, ${2:label})" },
        { "trigger": "disk.getLabel", "contents": "disk.getLabel(${1:side})" },
        { "trigger": "disk.getDiskID", "contents": "disk.getDiskID(${1:side})" },
        { "trigger": "disk.hasAudio", "contents": "disk.hasAudio(${1:side})" },
        { "trigger": "disk.getAudioTitle", "contents": "disk.getAudioTitle(${1:side})" },
        { "trigger": "disk.playAudio", "contents": "disk.playAudio(${1:side})" },
        { "trigger": "disk.stopAudio", "contents": "disk.stopAudio(${1:side})" },
        { "trigger": "disk.eject", "contents": "disk.eject(${1:side})" },

    // FS
        { "trigger": "fs.list", "contents": "fs.list(${1:path})" },
        { "trigger": "fs.exists", "contents": "fs.exists(${1:path})" },
        { "trigger": "fs.isDir", "contents": "fs.isDir(${1:path})" },
        { "trigger": "fs.isReadOnly", "contents": "fs.isReadOnly(${1:path})" },
        { "trigger": "fs.getName", "contents": "fs.getName(${1:path})" },
        { "trigger": "fs.getDrive", "contents": "fs.getDrive(${1:path})" },
        { "trigger": "fs.getSize", "contents": "fs.getSize(${1:path})" },
        { "trigger": "fs.makeDir", "contents": "fs.makeDir(${1:path})" },
        { "trigger": "fs.move", "contents": "fs.move(${1:fromPath}, ${2:toPath})" },
        { "trigger": "fs.copy", "contents": "fs.copy(${1:fromPath}, ${2:toPath})" },
        { "trigger": "fs.delete", "contents": "fs.delete(${1:path})" },
        { "trigger": "fs.combine", "contents": "fs.combine(${1:basePath}, ${2:localPath})" },
        { "trigger": "fs.open", "contents": "fs.open(${1:path})" },

    // GPS
        { "trigger": "gps.locate", "contents": "gps.locate(${1:timeout}, ${2:debug})" },

    // Help
        { "trigger": "help.path", "contents": "help.path()" },
        { "trigger": "help.setPath", "contents": "help.setPath(${1:path})" },
        { "trigger": "help.lookup", "contents": "help.lookup(${1:topic})" },
        { "trigger": "help.topics", "contents": "help.topics()" },

    // HTTP
        { "trigger": "http.request", "contents": "http.request(${1:url}, {2:*postData})" },
        { "trigger": "http.get", "contents": "http.get(${1:url})" },
        { "trigger": "http.post", "contents": "http.post(${1:url}, {2:postData})" },

    // OS
        { "trigger": "os.version", "contents": "os.version()" },
        { "trigger": "os.getComputerID", "contents": "os.getComputerID()" },
        { "trigger": "os.getComputerLabel", "contents": "os.getComputerLabel()" },
        { "trigger": "os.setComputerLabel", "contents": "os.setComputerLabel(${1:label})" },
        { "trigger": "os.run", "contents": "os.run(${1:environment}, ${2:programpath}, ${3:arguments})" },
        { "trigger": "os.loadAPI", "contents": "os.loadAPI(${1:name})" },
        { "trigger": "os.unloadAPI", "contents": "os.unloadAPI(${1:name})" },
        { "trigger": "os.pullEvent", "contents": "os.pullEvent(${1:target-event})" },
        { "trigger": "os.pullEventRaw", "contents": "os.pullEventRaw()" },
        { "trigger": "os.queueEvent", "contents": "os.queueEvent(${1:event}, ${2:param1}, ${3:param1}, {${4:...})" },
        { "trigger": "os.clock", "contents": "os.clock()" },
        { "trigger": "os.startTimer", "contents": "os.startTimer(${1:timeout})" },
        { "trigger": "os.sleep", "contents": "os.sleep(${1:timeout})" },
        { "trigger": "os.time", "contents": "os.time()" },
        { "trigger": "os.day", "contents": "os.day()" },
        { "trigger": "os.setAlarm", "contents": "os.setAlarm(${1:time})" },
        { "trigger": "os.shutdown", "contents": "os.shutdown()" },
        { "trigger": "os.reboot", "contents": "os.reboot()" },

    // Paintutils
        { "trigger": "paintutils.loadImage", "contents": "paintutils.loadImage(${1:path})" },
        { "trigger": "paintutils.drawImage", "contents": "paintutils.drawImage(${1:image}, ${2:x}, ${3:y})" },   
        { "trigger": "paintutils.drawPixel", "contents": "paintutils.drawPixel(${1:x}, ${2:y}, ${3:color})" },
        { "trigger": "paintutils.drawLine", "contents": "paintutils.drawLine(${1:startX}, ${2:startY}, ${3:endX}, ${4:endY}, ${5:color})" },

    // Parallel
        { "trigger": "parallel.waitForAny", "contents": "parallel.waitForAny(${1:function1}, ${2:function2}, ${3:...})" },
        { "trigger": "parallel.waitForAll", "contents": "parallel.waitForAll(${1:function1}, ${2:function2}, ${3:...})" },

    // Peripheral
        { "trigger": "peripheral.isPresent", "contents": "peripheral.isPresent(${1:side})" },
        { "trigger": "peripheral.getType", "contents": "peripheral.getType(${1:side})" },
        { "trigger": "peripheral.getMethods", "contents": "peripheral.getMethods(${1:side})" },
        { "trigger": "peripheral.call", "contents": "peripheral.call(${1:side}, ${2:methodName}, ${3:param1}, ${4:param2}, ${5:...})" },
        { "trigger": "peripheral.wrap", "contents": "peripheral.wrap(${1:side})" },

    // Rednet
        { "trigger": "rednet.open", "contents": "rednet.open(${1:side})" },
        { "trigger": "rednet.close", "contents": "rednet.close(${1:side})" },
        { "trigger": "rednet.announce", "contents": "rednet.announce()" },
        { "trigger": "rednet.send", "contents": "rednet.send(${1:receiverID}, ${2:message})" },
        { "trigger": "rednet.broadcast", "contents": "rednet.broadcast(${1:side})" },
        { "trigger": "rednet.receive", "contents": "rednet.receive(${1:timeout})" },
        { "trigger": "rednet.isOpen", "contents": "rednet.isOpen(${1:side})" },

    // Redstone
        { "trigger": "redstone.getSides", "contents": "redstone.getSides()" },
        { "trigger": "redstone.getInput", "contents": "redstone.getInput(${1:side})" },
        { "trigger": "redstone.setOutput", "contents": "redstone.setOutput(${1:side}, ${2:value})" },
        { "trigger": "redstone.getOutput", "contents": "redstone.getOutput(${1:side})" },
        { "trigger": "redstone.getBundledInput", "contents": "redstone.getBundledInput(${1:side})" },
        { "trigger": "redstone.getBundledOutput", "contents": "redstone.getBundledOutput(${1:side})" },
        { "trigger": "redstone.setBundledOutput", "contents": "redstone.setBundledOutput(${1:side}, ${2:colors})" },
        { "trigger": "redstone.testBundledInput", "contents": "redstone.testBundledInput(${1:side}, ${2:color})" },

    // Shell
        { "trigger": "shell.exit", "contents": "shell.exit()" },
        { "trigger": "shell.dir", "contents": "shell.dir()" },
        { "trigger": "shell.setDir", "contents": "shell.setDir(${1:path})" },
        { "trigger": "shell.path", "contents": "shell.path()" },
        { "trigger": "shell.setPath", "contents": "shell.setPath(${1:path})" },
        { "trigger": "shell.resolve", "contents": "shell.resolve(${1:localpath})" },
        { "trigger": "shell.resolveProgram", "contents": "shell.resolveProgram(${1:name})" },
        { "trigger": "shell.aliases", "contents": "shell.aliases()" },
        { "trigger": "shell.setAlias", "contents": "shell.setAlias(${1:path}, ${2:command})" },
        { "trigger": "shell.clearAlias", "contents": "shell.clearAlias(${1:path}, ${2:command})" },
        { "trigger": "shell.programs", "contents": "shell.programs()" },
        { "trigger": "shell.run", "contents": "shell.run(${1:program}, ${2:arguments})" },
        { "trigger": "shell.getRunningProgram", "contents": "shell.getRunningProgram()" },

    // Term
        { "trigger": "term.write", "contents": "term.write(${1:text})" },
        { "trigger": "term.clear", "contents": "term.clear()" },
        { "trigger": "term.clearLine", "contents": "term.clearLine()" },
        { "trigger": "term.getCursorPos", "contents": "term.getCursorPos()" },
        { "trigger": "term.setCursorPos", "contents": "term.setCursorPos(${1:x}, ${2:y})" },
        { "trigger": "term.setCursorBlink", "contents": "term.setCursorBlink(${1:bool})" },
        { "trigger": "term.isColor", "contents": "term.isColor()" },
        { "trigger": "term.isColour", "contents": "term.isColour()" },
        { "trigger": "term.getSize", "contents": "term.getSize()" },
        { "trigger": "term.scroll", "contents": "term.scroll(${1:n})" },
        { "trigger": "term.redirect", "contents": "term.redirect(${1:target})" },
        { "trigger": "term.restore", "contents": "term.restore()" },
        { "trigger": "term.setTextColor", "contents": "term.setTextColor(${1:color})" },
        { "trigger": "term.setBackgroundColor", "contents": "term.setBackgroundColor(${1:color})" },
        { "trigger": "term.setTextColour", "contents": "term.setTextColor(${1:colour})" },
        { "trigger": "term.setBackgroundColour", "contents": "term.setBackgroundColour(${1:colour})" },

    // Textutils
        { "trigger": "textutils.slowPrint", "contents": "textutils.slowPrint(${1:text}, ${2:rate})" },
        { "trigger": "textutils.slowWrite", "contents": "textutils.slowWrite(${1:text}, ${2:rate})" },
        { "trigger": "textutils.formatTime", "contents": "textutils.formatTime(${1:time}, ${2:TwentyFourHour})" },
        { "trigger": "textutils.tabulate", "contents": "textutils.tabulate(${1:table}, ${2:table2}, ${3:...})" },
        { "trigger": "textutils.pagedTabulated", "contents": "textutils.pagedTabulated(${1:table}, ${2:table2}, ${3:...})" },
        { "trigger": "textutils.pagedPrint", "contents": "textutils.pagedPrint(${1:string}, ${2:confirmation_lines})" },
        { "trigger": "textutils.serialize", "contents": "textutils.serialize(${1:table})" },
        { "trigger": "textutils.unserialize", "contents": "textutils.unserialize(${1:text})" },
        { "trigger": "textutils.urlEncode", "contents": "textutils.urlEncode(${1:text})" },

    // Turtle
        { "trigger": "turtle.craft", "contents": "turtle.craft(${1:quantity})" },
        { "trigger": "turtle.forward", "contents": "turtle.forward()" },
        { "trigger": "turtle.back", "contents": "turtle.back()" },
        { "trigger": "turtle.up", "contents": "turtle.up()" },
        { "trigger": "turtle.down", "contents": "turtle.down()" },
        { "trigger": "turtle.turnLeft", "contents": "turtle.turnLeft()" },
        { "trigger": "turtle.turnRight", "contents": "turtle.turnRight()" },
        { "trigger": "turtle.select", "contents": "turtle.select(${1:slotNum})" },
        { "trigger": "turtle.getItemCount", "contents": "turtle.getItemCount(${1:slotNum})" },
        { "trigger": "turtle.getItemSpace", "contents": "turtle.getItemSpace(${1:slotNum})" },
        { "trigger": "turtle.attack", "contents": "turtle.attack()" },
        { "trigger": "turtle.attackUp", "contents": "turtle.attackUp()" },
        { "trigger": "turtle.attackDown", "contents": "turtle.attackDown()" },
        { "trigger": "turtle.dig", "contents": "turtle.dig()" },
        { "trigger": "turtle.digUp", "contents": "turtle.digUp()" },
        { "trigger": "turtle.digDown", "contents": "turtle.digDown()" },
        { "trigger": "turtle.place", "contents": "turtle.place(${1:signText})" },
        { "trigger": "turtle.placeUp", "contents": "turtle.placeUp()" },
        { "trigger": "turtle.placeDown", "contents": "turtle.placeDown()" },
        { "trigger": "turtle.detect", "contents": "turtle.detect()" },
        { "trigger": "turtle.detectUp", "contents": "turtle.detectUp()" },
        { "trigger": "turtle.detectDown", "contents": "turtle.detectDown()" },
        { "trigger": "turtle.compare", "contents": "turtle.compare()" },
        { "trigger": "turtle.compareUp", "contents": "turtle.compareUp()" },
        { "trigger": "turtle.compareDown", "contents": "turtle.compareDown()" },
        { "trigger": "turtle.compareTo", "contents": "turtle.compareTo(${1:slot})" },
        { "trigger": "turtle.drop", "contents": "turtle.drop(${1:count})" },
        { "trigger": "turtle.dropUp", "contents": "turtle.dropUp(${1:count})" },
        { "trigger": "turtle.dropDown", "contents": "turtle.dropDown(${1:count})" },
        { "trigger": "turtle.suck", "contents": "turtle.suck()" },
        { "trigger": "turtle.suckUp", "contents": "turtle.suckUp()" },
        { "trigger": "turtle.suckDown", "contents": "turtle.suckDown()" },
        { "trigger": "turtle.refuel", "contents": "turtle.refuel(${1:quantity})" },
        { "trigger": "turtle.getFuelLevel", "contents": "turtle.getFuelLevel()" },
        { "trigger": "turtle.transferTo", "contents": "turtle.transferTo(${1:slot}, ${2:quantity})" },

    // Core Function
        { "trigger": "write", "contents": "write(${1:str})" },
        { "trigger": "sleep", "contents": "sleep(${1:time})" },
        { "trigger": "tostring", "contents": "tostring(${1:num})" },
        { "trigger": "tonumber", "contents": "tonumber(${1:str})" },
        { "trigger": "setfenv", "contents": "setfenv(${1:func}, ${2:env})" },
        { "trigger": "getfenv", "contents": "getfenv(${1:func})" },
        { "trigger": "rawset", "contents": "rawset(${1:table}, ${2:str}, ${3:func})" }
    ]
}
